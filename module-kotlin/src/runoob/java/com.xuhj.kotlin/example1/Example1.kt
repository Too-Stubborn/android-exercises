package com.xuhj.kotlin.example1

/**
 * Kotlin 基础语法
 *
 * @author xuhj
 * @version 1.0.0
 * @since 2017/8/3
 */
fun main(args: Array<String>) {
    test12()
}

// ------------------------------------------------------------------------------------------------
/**
 * 表达式作为函数体，返回类型自动推断
 */
fun test1(a: Int, b: Int) = a + b

// ------------------------------------------------------------------------------------------------
/**
 * public 方法则必须明确写出返回类型
 */
public fun test2(a: Int, b: Int): Int = a + b

// ------------------------------------------------------------------------------------------------
/**
 * Int 参数，返回值 Int
 */
fun test3(a: Int, b: Int): Int {
    return a + b
}

// ------------------------------------------------------------------------------------------------
/**
 * Unit 无返回值的函数(类似Java中的void)
 */
fun test4(a: Int, b: Int): Unit {
    println(a + b)
}

// ------------------------------------------------------------------------------------------------
/**
 * 如果是返回 Unit类型，则可以省略(对于public方法也是这样)
 */
public fun test5(a: Int, b: Int) {
    println(a + b)
}

// ------------------------------------------------------------------------------------------------
/**
 * Int? 表示可为空
 * b: Int? = 1 表示可为空，初始值=1
 * a!! 表示抛出空指针异常
 */
fun test6(a: Int?, b: Int? = 1): Int? {
    println(a!! + b!!)
    return a + b
}

// ------------------------------------------------------------------------------------------------
/**
 * 函数的变长参数可以用 vararg 关键字进行标识
 *
 * 例如： test7(1,2,3,4,5)  // 输出12345
 */
fun test7(vararg a: Int) {
    for (i in a) {
        print(i)
    }
}

// ------------------------------------------------------------------------------------------------
/**
 * 定义常量与变量
 *
 * var <标识符> : <类型> = <初始化值>: 可变变量定义
 * val <标识符> : <类型> = <初始化值>: 不可变变量定义，只能赋值一次的变量(类似Java中final修饰的变量)
 */
fun test8() {
    var a: Int = 1
    val b = 2 // 系统自动推断变量类型为Int
    var c: Int  // 如果不在声明时初始化则必须提供变量类型

    // 常量与变量都可以没有初始化值,但是在引用前必须初始化
    c = 1
    c += 1
}

// ------------------------------------------------------------------------------------------------
/**
 * 字符串模板
 *
 * $ 表示一个变量名或者变量值
 * $varName 表示变量值
 * ${varName.fun()} 表示变量的方法返回值
 */
fun test9() {
    val a1 = 1
    var s1 = "s1 is $a1"
    // 加表达式
    var s2 = "s2 is ${a1 + 2} "
}

// ------------------------------------------------------------------------------------------------
/**
 * NULL检查机制
 */
fun test10() {
    //类型后面加?表示可为空
    val a: String? = "123"
    //不做处理返回 null
    var b = a?.toInt()
    //a为空返回-1
    var c = a?.toInt() ?: -1
    //a!!抛出空指针异常
    var d = a!!.toInt()

//    println(b)
//    println(c)
//    println(d)

    fun temp(a: String?): String? = a
    var x = temp("asd")
    var y = temp("123")
    // 直接使用 `x * y` 会导致错误, 因为它们可能为 null.
    if (x != null && y != null) {
        // 在进行过 null 值检查之后, x 和 y 的类型会被自动转换为非 null 变量
        print(x + y)
    }
}

// ------------------------------------------------------------------------------------------------
/**
 * 类型检测及自动类型转换
 */
fun test11() {
    fun getLength1(obj: Any): Int {
        if (obj is String) {
            // 做过类型判断以后，obj会被系统自动转换为String类型
            return obj.length
        }
        //在这里还有一种方法，与Java中instanceof不同，使用!is
        if (obj !is String) {
            return 0
        }
        // 这里的obj仍然是Any类型的引用
        return 0
    }

    fun getLength2(obj: Any): Int {
        if (obj !is String) {
            return 0
        }
        // 在这个分支中, `obj` 的类型会被自动转换为 `String`
        return obj.length
    }
    println(getLength1("asd"))
    println(getLength2("asdasd"))
}

// ------------------------------------------------------------------------------------------------
/**
 * 区间
 * 区间表达式由具有操作符形式 .. 的 rangeTo 函数辅以 in 和 !in 形成。
 * 区间是为任何可比较类型定义的，但对于整型原生类型，它有一个优化的实现。
 */
fun test12() {
    for (i in 1..4) {
        print(i)  // 输出“1234”
    }

    println()
    for (i in 4..1) {
        print(i)  // 什么都不输出
    }

    println()
    // 等同于 1 <= i && i <= 10
    var a = 2
    if (a in 1..10) {
        print("a in 1..10")
    }

    println()
    // 使用 step 指定步长
    for (i in 1..10 step 2) {
        print(i)  // 输出13579
    }

    println()
    for (i in 4 downTo 1 step 2) {
        print(i)  // 输出42
    }

    println()
    // 使用 until 函数排除结束元素
    for (i in 1 until 10) {   // i in [1, 10) 排除了 10
        print(i)
    }
}